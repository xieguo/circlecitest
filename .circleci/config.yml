# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/php:7.1.18-cli-node-browsers
        environment:
          #MYSQL_HOST: 127.0.0.1
          #MYSQL_DB: test
          #MYSQL_USER: root
          #MYSQL_ALLOW_EMPTY_PASSWORD: true
          #MYSQL_PASSWORD:
          DB_DATABASE: test
          DB_USERNAME: root
          DB_PASSWORD: ''
      - image: circleci/mysql:5.7.22-ram
        command: mysqld
        environment:
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true

    working_directory: ~/repository

    steps:
      - checkout
      # Download and cache dependencies (PHP + JS)
      - restore_cache:
          keys:
          - v1-dependencies-php-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-php-
      - restore_cache:
          keys:
          - v1-dependencies-js-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-js-
      - run:
          name: Installing OS dependencies
          command: |
             /bin/bash << EOF
             sudo apt install mysql-client libpng-dev -y
             sudo docker-php-ext-install pdo_mysql
             curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
             unzip awscli-bundle.zip
             sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
             EOF
      - run:
          name: Installing PHP dependencies (Composer)
          command: composer install -n --prefer-dist
      - run:
          name: Installing JS dependencies (npm)
          command: npm install
      - run:
          name: Downloading MySQL Dumps and importing them into conatiner
          command: |
              /bin/bash << EOF
              aws s3 cp s3://bemyguest-infrastructure/demo-dumps/main-dump-structure.sql .
              aws s3 cp s3://bemyguest-infrastructure/demo-dumps/logs-dump-structure.sql .
              aws s3 cp s3://bemyguest-infrastructure/demo-dumps/stats-dump-structure.sql .
              mysql -h 127.0.0.1 -u root -e "create database bemyguest;"
              mysql -h 127.0.0.1 -u root -e "create database bemyguest_stats;"
              mysql -h 127.0.0.1 -u root -e "create database bemyguest_logs;"
              mysql -h 127.0.0.1 -u root bemyguest < main-dump-structure.sql
              mysql -h 127.0.0.1 -u root bemyguest_stats < stats-dump-structure.sql
              mysql -h 127.0.0.1 -u root bemyguest_logs < logs-dump-structure.sql
              EOF
      - run:
          name: Migrations
          command: php artisan migrate --force
      #- run:
      #    name: Unit test
      #    command: ./vendor/bin/phpunit --exclude-group excludeFromBuilds
      - run:
          name: Preparing build for artifact store
          command: rm -r node_modules && zip -r -q artifacts .
      - store_artifacts:
          path: artifacts.zip
      - save_cache:
          key: v1-dependencies-php-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - save_cache:
          key: v1-dependencies-js-{{ checksum "package.json" }}
          paths:
            - ./node_modules


      # run tests!
      #- run: phpunit
  deploy-production:
    machine:
      enabled: true
    steps:
      - run:
          name: Deploy PRODUCTION Over SSH
          command: ssh $SSH_USER_STAGING@$SSH_HOST_STAGING "uname -a"

  deploy-staging:
    machine:
      enabled: true
    steps:
      - run:
          name: Deploy STAGING Over SSH
          command: |
              ssh $SSH_USER_STAGING@$SSH_HOST_STAGING /bin/bash << EOF
              # Downloading Build Artifacts
              curl https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PREVIOUS_BUILD_NUM/artifacts\?circle-token\=$CIRCLE_TOKEN |
              grep -o 'https://[^"]*' |
              xargs wget -O /var/www/artifacts/$(echo $CIRCLE_BRANCH | sed -r "s|[-/.]|_|g" | tr '[:upper:]' '[:lower:]').zip
              # Checking
              ls -lah /var/www/artifacts/
              # Deploying
              ./circleci_provisioner $CIRCLE_BRANCH
              EOF

#  create_demo_database_dump:
#    machine:
#      enabled: true
#    steps:
#      - run:
#          name:

workflows:
  version: 2

  build-and-deploy:
    jobs:
      - build
      - deploy-production:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - deploy-staging:
          requires:
            - build
          filters:
            branches:
              only:
                - /feature\/.*/
                - /hotfix\/.*/

#  scheduled-workflow:
#    triggers:
#      - schedule:
#          cron: "0 6 * * *"
#          filters:
#            branches:
#              only: master
#    jobs:
#      - create_demo_database_dump